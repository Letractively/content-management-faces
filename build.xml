<?xml version="1.0" encoding="UTF-8"?>
<project name="cmf" default="all">
  
  
  <property file="cmf.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="128m"/>
  <patternset id="ignored.files">
    <exclude name="**/CVS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/rcs/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/.pyc/**"/>
    <exclude name="**/.pyo/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/.sbas/**"/>
    <exclude name="**/.IJI.*/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/*.lib/**"/>
    <exclude name="**/*~/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.war"/>
    <include name="*.ear"/>
    <include name="*.zip"/>
    <include name="*.swc"/>
    <include name="*.egg"/>
    <include name="*.jar"/>
  </patternset>
  <patternset id="compiler.resources">
    <include name="**/?*.properties"/>
    <include name="**/?*.xml"/>
    <include name="**/?*.gif"/>
    <include name="**/?*.png"/>
    <include name="**/?*.jpeg"/>
    <include name="**/?*.jpg"/>
    <include name="**/?*.html"/>
    <include name="**/?*.dtd"/>
    <include name="**/?*.tld"/>
    <include name="**/?*.ftl"/>
  </patternset>
  
  
  <!-- Project Libraries -->
  
  <path id="library.el.classpath">
    <pathelement location="${basedir}/lib/el/el-impl-2.1.2-b04.jar"/>
    <pathelement location="${basedir}/lib/el/javax.el.jar"/>
  </path>
  
  <path id="library.java_ee_6.classpath">
    <pathelement location="${basedir}/lib/jpa/javax.ejb.jar"/>
  </path>
  
  <path id="library.jpa.classpath">
    <fileset dir="${basedir}/lib/jpa">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  <path id="library.jsf.classpath">
    <fileset dir="${basedir}/lib/jsf">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  <path id="library.jsfunit.classpath">
    <fileset dir="${basedir}/lib/jsfunit">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>

  <path id="library.junit.classpath">
    <fileset dir="${basedir}/lib/junit">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  <path id="library.postgres.classpath">
    <pathelement location="${basedir}/lib/postgres/postgresql-8.4-701.jdbc3.jar"/>
  </path>
  
  
  <!-- Global Libraries -->
  
  
  <!-- Application Server Libraries -->
  
  <!-- Modules -->
  
  
  <!-- Module cmf -->
  
  <dirname property="module.cmf.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.cmf" value="${compiler.args}"/>
  
  <property name="cmf.output.dir" value="${module.cmf.basedir}/out/production/cmf"/>
  <property name="cmf.testoutput.dir" value="${module.cmf.basedir}/out/test/cmf"/>
  
  <path id="cmf.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="cmf.module.production.classpath">
    <path refid="library.jsf.classpath"/>
    <path refid="library.el.classpath"/>
    <path refid="library.jpa.classpath"/>
    <path refid="library.java_ee_6.classpath"/>
    <path refid="library.postgres.classpath"/>
  </path>
  
  <path id="cmf.runtime.production.module.classpath">
    <pathelement location="${cmf.output.dir}"/>
    <path refid="library.java_ee_6.classpath"/>
    <path refid="library.postgres.classpath"/>
  </path>
  
  <path id="cmf.module.classpath">
    <pathelement location="${cmf.output.dir}"/>
    <path refid="library.jsf.classpath"/>
    <path refid="library.jsfunit.classpath"/>
    <path refid="library.junit.classpath"/>
    <pathelement location="${basedir}/lib/jsfunit/junit-3.8.1.jar"/>
    <path refid="library.el.classpath"/>
    <path refid="library.jpa.classpath"/>
    <path refid="library.java_ee_6.classpath"/>
    <path refid="library.postgres.classpath"/>
  </path>
  
  <path id="cmf.runtime.module.classpath">
    <pathelement location="${cmf.testoutput.dir}"/>
    <pathelement location="${cmf.output.dir}"/>
    <path refid="library.jsf.classpath"/>
    <path refid="library.jsfunit.classpath"/>
    <path refid="library.junit.classpath"/>
    <pathelement location="${basedir}/lib/jsfunit/junit-3.8.1.jar"/>
    <path refid="library.el.classpath"/>
    <path refid="library.jpa.classpath"/>
    <path refid="library.java_ee_6.classpath"/>
    <path refid="library.postgres.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.cmf">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.cmf">
    <patternset refid="excluded.from.module.cmf"/>
  </patternset>
  
  <path id="cmf.module.sourcepath">
    <dirset dir="${module.cmf.basedir}">
      <include name="src"/>
    </dirset>
  </path>
  
  <path id="cmf.module.test.sourcepath">
    <dirset dir="${module.cmf.basedir}">
      <include name="test"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.cmf" depends="compile.module.cmf.production,compile.module.cmf.tests" description="Compile module cmf"/>
  
  <target name="compile.module.cmf.production" description="Compile module cmf; production classes">
    <mkdir dir="${cmf.output.dir}"/>
    <javac destdir="${cmf.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.cmf}"/>
      <bootclasspath refid="cmf.module.bootclasspath"/>
      <classpath refid="cmf.module.production.classpath"/>
      <src refid="cmf.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.cmf"/>
    </javac>
    
    <copy todir="${cmf.output.dir}">
      <fileset dir="${module.cmf.basedir}/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.cmf.tests" depends="compile.module.cmf.production" description="compile module cmf; test classes" unless="skip.tests">
    <mkdir dir="${cmf.testoutput.dir}"/>
    <javac destdir="${cmf.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.cmf}"/>
      <bootclasspath refid="cmf.module.bootclasspath"/>
      <classpath refid="cmf.module.classpath"/>
      <src refid="cmf.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.cmf"/>
    </javac>
    
    <copy todir="${cmf.testoutput.dir}">
      <fileset dir="${module.cmf.basedir}/test">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="clean.module.cmf" description="cleanup module">
    <delete dir="${cmf.output.dir}"/>
    <delete dir="${cmf.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.cmf, clean.artifact.cmf:war_exploded" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.cmf" description="build all modules"/>
  
  <target name="init.artifacts">
    <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
    <property name="artifact.output.cmf:jar" value="${basedir}/out/artifacts/cmf_jar"/>
    <property name="artifact.output.cmf:war_exploded" value="${basedir}/out/artifacts/cmf"/>
    <mkdir dir="${artifacts.temp.dir}"/>
    <property name="temp.jar.path.cmf.jar" value="${artifacts.temp.dir}/cmf.jar"/>
  </target>
  
  <target name="clean.artifact.cmf:war_exploded" description="clean cmf:war exploded artifact output">
    <delete dir="${artifact.output.cmf:war_exploded}"/>
  </target>
  
  <target name="artifact.cmf:jar" depends="init.artifacts, compile.module.cmf" description="Build &apos;cmf:jar&apos; artifact">
    <property name="artifact.temp.output.cmf:jar" value="${artifacts.temp.dir}/cmf_jar"/>
    <mkdir dir="${artifact.temp.output.cmf:jar}"/>
    <jar destfile="${temp.jar.path.cmf.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${cmf.output.dir}"/>
      <zipfileset file="${basedir}/src/META-INF/MANIFEST.MF" prefix="META-INF"/>
      <zipfileset dir="${basedir}/src/META-INF/resources" prefix="META-INF/resources"/>
      <zipfileset file="${basedir}/LICENSE"/>
      <zipfileset dir="${basedir}/src/net" prefix="src/net"/>
    </jar>
    <copy file="${temp.jar.path.cmf.jar}" tofile="${artifact.temp.output.cmf:jar}/cmf.jar"/>
  </target>
  
  <target name="artifact.cmf:war_exploded" depends="init.artifacts, compile.module.cmf, artifact.cmf:jar" description="Build &apos;cmf:war exploded&apos; artifact">
    <mkdir dir="${artifact.output.cmf:war_exploded}"/>
    <copy todir="${artifact.output.cmf:war_exploded}">
      <fileset dir="${basedir}/web"/>
    </copy>
    <mkdir dir="${artifact.output.cmf:war_exploded}/WEB-INF"/>
    <copy file="${basedir}/web/WEB-INF/web.xml" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/web.xml"/>
    <mkdir dir="${artifact.output.cmf:war_exploded}/WEB-INF"/>
    <mkdir dir="${artifact.output.cmf:war_exploded}/WEB-INF/classes"/>
    <copy todir="${artifact.output.cmf:war_exploded}/WEB-INF/classes">
      <fileset dir="${cmf.output.dir}"/>
    </copy>
    <copy todir="${artifact.output.cmf:war_exploded}/WEB-INF/classes">
      <fileset dir="${basedir}/out/test/cmf"/>
    </copy>
    <mkdir dir="${artifact.output.cmf:war_exploded}/WEB-INF/lib"/>
    <copy file="${basedir}/lib/jsfunit/ant-1.5.4.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/ant-1.5.4.jar"/>
    <copy file="${basedir}/lib/jsfunit/apache-mime4j-0.6.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/apache-mime4j-0.6.jar"/>
    <copy file="${basedir}/lib/jsfunit/aspectjrt-1.2.1.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/aspectjrt-1.2.1.jar"/>
    <copy file="${basedir}/lib/jsfunit/cactus-13-1.7.1.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/cactus-13-1.7.1.jar"/>
    <copy file="${basedir}/lib/jsfunit/cactus-ant-13-1.7.1.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/cactus-ant-13-1.7.1.jar"/>
    <copy file="${basedir}/lib/jsfunit/cargo-0.5.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/cargo-0.5.jar"/>
    <copy file="${basedir}/lib/jsfunit/commons-codec-1.4.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/commons-codec-1.4.jar"/>
    <copy file="${basedir}/lib/jsfunit/commons-collections-3.2.1.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/commons-collections-3.2.1.jar"/>
    <copy file="${basedir}/lib/jsfunit/commons-httpclient-2.0.2.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/commons-httpclient-2.0.2.jar"/>
    <copy file="${basedir}/lib/jsfunit/commons-io-1.4.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/commons-io-1.4.jar"/>
    <copy file="${basedir}/lib/jsfunit/commons-lang-2.4.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/commons-lang-2.4.jar"/>
    <copy file="${basedir}/lib/jsfunit/commons-logging-1.1.1.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/commons-logging-1.1.1.jar"/>
    <copy file="${basedir}/lib/jsfunit/cssparser-0.9.5.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/cssparser-0.9.5.jar"/>
    <copy file="${basedir}/lib/jsfunit/htmlunit-2.8.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/htmlunit-2.8.jar"/>
    <copy file="${basedir}/lib/jsfunit/htmlunit-core-js-2.8.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/htmlunit-core-js-2.8.jar"/>
    <copy file="${basedir}/lib/jsfunit/httpclient-4.0.1.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/httpclient-4.0.1.jar"/>
    <copy file="${basedir}/lib/jsfunit/httpcore-4.0.1.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/httpcore-4.0.1.jar"/>
    <copy file="${basedir}/lib/jsfunit/httpmime-4.0.1.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/httpmime-4.0.1.jar"/>
    <copy file="${basedir}/lib/jsfunit/jboss-jsfunit-core-1.3.0.Final.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/jboss-jsfunit-core-1.3.0.Final.jar"/>
    <copy file="${basedir}/lib/jsfunit/junit-3.8.1.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/junit-3.8.1.jar"/>
    <copy file="${basedir}/lib/jsfunit/nekohtml-1.9.14.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/nekohtml-1.9.14.jar"/>
    <copy file="${basedir}/lib/jsfunit/sac-1.3.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/sac-1.3.jar"/>
    <copy file="${basedir}/lib/jsfunit/xalan-2.7.0.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/xalan-2.7.0.jar"/>
    <copy file="${basedir}/lib/jsfunit/xercesImpl-2.8.1.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/xercesImpl-2.8.1.jar"/>
    <copy todir="${artifact.output.cmf:war_exploded}/WEB-INF/lib">
      <fileset dir="${artifact.temp.output.cmf:jar}"/>
    </copy>
    <copy file="${basedir}/lib/postgres/postgresql-8.4-701.jdbc3.jar" tofile="${artifact.output.cmf:war_exploded}/WEB-INF/lib/postgresql-8.4-701.jdbc3.jar"/>
  </target>
  
  <target name="build.all.artifacts" depends="artifact.cmf:jar, artifact.cmf:war_exploded" description="Build all artifacts">
    <mkdir dir="${artifact.output.cmf:jar}"/>
    <copy todir="${artifact.output.cmf:jar}">
      <fileset dir="${artifact.temp.output.cmf:jar}"/>
    </copy>
    
    <!-- Delete temporary files -->
    <delete dir="${artifacts.temp.dir}"/>
  </target>
  
  <target name="all" depends="build.modules, build.all.artifacts" description="build all"/>
</project>
